<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function spTicketConversation($scope, nowAttachmentHandler, $animate, $rootScope, cabrillo, $timeout, snRecordWatcher, spUtil, spAriaUtil, $http, $window, $sce, snAttachmentHandler, i18n, dynamicTranslation) {
	$scope.showLocationIcon = false;
	$scope.msg = "";
	$scope.isNative = cabrillo.isNative();
	$scope.errorMessages = [];
	var existingEntries = {};
	var c = this;
	var skipNextRecordWatchUpdate = false;
	$scope.typing = [];
	if (!$scope.data.hasReadableJournalField && !$scope.data.isNewRecord)
		console.warn("No readable journal field (comments, work notes, etc.) available in the stream for this record");
	if ($scope.page && $scope.page.g_form)
		hideParentJournalFields();
	// trigger broadcast of case sys_id due to query of parent sys_id param
	if ($scope.data.sys_id)
    $rootScope.$broadcast('pa.updated.branch.case', $scope.data.sys_id);

	function hideParentJournalFields() {
		if (!$scope.data.stream)
			return;

		var fields = $scope.data.stream.journal_fields;
		var g_form = $scope.page.g_form;
		for (var f in fields)
			g_form.setDisplay(fields[f].name, false);
	}
	var liveProfiles = {};
	liveProfiles[$scope.user.sys_id] = {
		userID: $scope.user.sys_id,
		name: $scope.user.name,
		initials: $window.NOW.user_initials
	};
	if ($window.NOW.user_avatar) {
		liveProfiles[$scope.user.sys_id].userImage = $window.NOW.user_avatar;
	}

	$scope.getLiveProfileByUserId = function (userId){
		return liveProfiles[userId];
	}

	var pending = {};

	//Little caching implementation to make sure we only get a given user's profile once.
	$scope.hasLiveProfile = function hasLiveProfile(userId){
		if (!userId)
			return false;

		if (liveProfiles[userId])
			return true;
		
		if (pending[userId])
			return false;
		
		pending[userId] = $http.get('/api/now/live/profiles/sys_user.' + userId).then(function (response) {
			liveProfiles[userId] = {
				userID: userId,
				name: response.data.result.name,
				initials: buildInitials(response.data.result.name),
				avatar: response.data.result.avatar
			};
		});
		return false;
	}

	function buildInitials(name) {
		if (!name)
			return "--";
		
		var initialMatchRegex = /^[A-ZÀ-Ÿ]|^[\u3040-\u309f]|^[\u30a0-\u30ff]|^[\uff66-\uff9f]|^[\u4e00-\u9faf]/;
		// Included Hiragana, Katakana, CJK Unified Ideographs and Halfwidth and Fullwidth Forms Blocks 
		// Hiragana -> Japanese words, Katakana -> foreign words
		// CJK Unified Ideographs -> modern Chinese, Japanese, Korean and Vietnamese characters 
		
		var initials = name.split(" ").map(function(word) {
			return word.toUpperCase();
		}).filter(function(word) {
			return word.match(initialMatchRegex);
		}).map(function(word) {
			return word.substring(0,1);
		}).join("");

		return (initials.length > 3) ? initials.substr(0, 3) : initials;
	}


	function setupAttachmentHandler(){
		$scope.attachmentHandler = new nowAttachmentHandler(attachSuccess, appendError);

		function attachSuccess() {
			$rootScope.$broadcast("sp.attachments.update", $scope.data.sys_id);
			spAriaUtil.sendLiveMessage($scope.data.attachAddedMsg);
		}

		function appendError(error) {
			spUtil.addErrorMessage(error.msg + error.fileName);
			$scope.errorMessages.push(error);
			spAriaUtil.sendLiveMessage($scope.data.attachFailMsg);
		}

		$timeout(function() {
			$scope.attachmentHandler.setParams($scope.data.table, $scope.data.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);
		})
	}
	setupAttachmentHandler();

	var recordWatcherTimer;
	$scope.$on('record.updated', function(name, data) {
		// Use record watcher update if:
		//	This record was updated AND This widget didn't trigger the update.
		if (data.table_name == $scope.data.table && data.sys_id == $scope.data.sys_id){
			$timeout.cancel(recordWatcherTimer);
			recordWatcherTimer = $timeout(function(){
				if (skipNextRecordWatchUpdate)
					skipNextRecordWatchUpdate = false;
				else
					spUtil.update($scope).then(function(r){
						$scope.data.stream = r.stream;
					});
			}, 250);
		}
	});

	$scope.$on('sp.show_location_icon', function(evt) {
		$scope.data.showLocationIcon = true;
	});
	
	$scope.$on('attachment.updated', function(evt,options) {
		if ($scope.data.sys_id != -1 && options.sys_id == $scope.data.sys_id)
			updateAttachmentState($scope.data.table, $scope.data.sys_id);
	});
	

	function updateAttachmentState(table, sys_id) {
			c.server.update().then(function (data) {
					if (!data.stream || !data.stream.entries)
						return;
					var newEntries = data.stream.entries;
					var currEntries = $scope.data.mergedEntries;
					var oldSize = currEntries ? currEntries.length : 0;
					var newSize = newEntries.length;
					for (var i = 0; i < oldSize; i++) {
							if (!currEntries[i].attachment)
									continue;
							for (var j = 0; j < newSize; j++) {
									if (currEntries[i].sys_id == newEntries[j].sys_id && newEntries[j].attachment) {
											currEntries[i].attachment.state = newEntries[j].attachment.state;
											break;
									}
							}
					}
			});
	}
	
	$scope.scanAttachment = function(attachment){
		snAttachmentHandler.scanAttachment(attachment);
	}
	
	$rootScope.$on('pa.updated.branch', function(evt, data) {
		$scope.data.usersBranch = data.id;
		c.server.update().then(function (data) {
			    if (data.sys_id)
					   $rootScope.$broadcast('pa.updated.branch.case', data.sys_id);

					if (!data.stream || !data.stream.entries)
						return;
			$scope.data.stream = data.stream;
			$scope.data.ticketTitle = data.ticketTitle;
					var newEntries = data.stream.entries;
			    $scope.data.mergedEntries = newEntries;
					var currEntries = $scope.data.mergedEntries;
					var oldSize = currEntries ? currEntries.length : 0;
					var newSize = newEntries.length;
					for (var i = 0; i < oldSize; i++) {
							if (!currEntries[i].attachment)
									continue;
							for (var j = 0; j < newSize; j++) {
									if (currEntries[i].sys_id == newEntries[j].sys_id && newEntries[j].attachment) {
											currEntries[i].attachment.state = newEntries[j].attachment.state;
											break;
									}
							}
					}														
		});
	})
	
	$rootScope.$on('sp.sessions', function(evt, sessions) {
		$scope.typing = [];
		Object.keys(sessions).forEach(function (session) {
			var journalFields = scope.data.stream.journal_fields;
			var canUserReadJournalField = false;
			session = sessions[session];
			
			for (var j = 0; j < journalFields.length; j++) {
				if (journalFields[j].name === session.field_type) {
					canUserReadJournalField = journalFields[j].can_read;
					break;
				}									
			}
			
			if (session.status === 'typing' && canUserReadJournalField)
				$scope.typing.push(session);
			else
				return;
	
		})
	})

	$scope.$on('sp.conversation_title.changed', function(evt, text) {
		$scope.data.ticketTitle = text;
	})

	$scope.$watch("data.canWrite", function() {
		$rootScope.$broadcast("sp.record.can_write", $scope.data.canWrite);
	});

	var streamUpdateTimer;
	$scope.$watch("data.stream", function() {
		$timeout.cancel(streamUpdateTimer);
		streamUpdateTimer = $timeout(function() {
			mergeStreamEntries();
		}, 50);
	});

	function mergeStreamEntries() {
		$scope.placeholder = $scope.data.placeholderNoEntries;
		if (!$scope.data.stream || !$scope.data.stream.entries)
			return;

		$scope.placeholder = $scope.data.placeholder;
		var entries = $scope.data.stream.entries;
		for (var i = 0; i < entries.length; i++) {
		    if (entries[i].attachment)
		        entries[i].attachment = $scope.attachmentHandler.canViewImage([entries[i].attachment])[0];
		}
		if (!$scope.data.mergedEntries) {
			$scope.data.mergedEntries = $scope.data.stream.entries.slice();
			for (var i = 0; i < entries.length; i++) {
				existingEntries[entries[i].sys_id] = true;
			}

			return;
		}

		var mergedEntries = $scope.data.mergedEntries;
		for (var i = entries.length-1; i >= 0; i--) {
			var curEntry = entries[i];
			if (isNewEntry(mergedEntries, curEntry)){
				mergedEntries.unshift(curEntry);
				existingEntries[curEntry.sys_id] = true;
			}
		}
	}

	function isNewEntry(mergedEntries, item) {
		for (var i=0; i < mergedEntries.length; i++) {
			if (mergedEntries[i].sys_id === item.sys_id) {
				return false;
			}
		}
		return true;
	}

	$scope.getPlaceholder = function() {
		if ($scope.data.use_dynamic_placeholder && $scope.data.useSecondaryJournalField)
			return $scope.data.secondaryJournalField.label;
		return $scope.placeholder;
	};

	var colorCache;
	$scope.getFieldColor = function(fieldName) {
		var defaultColor = "transparent";
		if (colorCache) {
			if (fieldName in colorCache)
				return colorCache[fieldName];
			else
				return defaultColor;
		}

		colorCache = {};
		var jf = $scope.data.stream.journal_fields;
		for (var i=0; i<jf.length;i++) {
			colorCache[jf[i].name] = jf[i].color || defaultColor;
		}
		return $scope.getFieldColor(fieldName);
	}

	$scope.checkInLocation = function() {
		$rootScope.$broadcast("check_in_location");
		$rootScope.$broadcast("location.sharing.start");
	}

	$scope.$on("location.sharing.end", function() {
		$timeout(function() {$scope.msg = ""}, 500);
	})

	$scope.$on("location.sharing.start", function() {
		$scope.msg = $scope.data.sharingLocMsg;
	})

	$scope.scanBarcode = function() {
		$rootScope.$broadcast("scan_barcode");
	}

	$scope.$on("attachment.upload.start", function() {
		$scope.data.isPosting = true;
		$scope.msg = $scope.data.uploadingAttachmentMsg;
	})

	$scope.$on("attachment.upload.stop", function() {
		$scope.data.isPosting = false;
		$scope.msg = "";
		//update the stream so we get the new attachment
		spUtil.update($scope).then(function(r) {
			$scope.data.stream = r.stream;
		});
	});

	$scope.trustAsHtml = function(text) {
		return $sce.trustAsHtml(text);
	}
	
	$scope.data.isPosting = false;

	$scope.postEntry = function(input) {
		post(input);
	};

	function post(input) {
		if ($scope.data.isPosting)
			return;

		if (!input)
			return;

		input = input.trim();
		$scope.data.journalEntry = input;

		if ($scope.data.useSecondaryJournalField)
			$scope.data.journalEntryField = $scope.data.secondaryJournalField.name;
		else
			$scope.data.journalEntryField = $scope.data.primaryJournalField.name;
		$scope.data.isPosting = true;
		spUtil.update($scope).then(function(){
			$scope.data.isPosting = false;
			reset();
			spAriaUtil.sendLiveMessage($scope.data.messagePostedMsg);
			$timeout(function() {
				$scope.setFocus(); // sets focus back on input, defined in "link"
			});
		});
		skipNextRecordWatchUpdate = true;
		$scope.setFocus(); // sets focus back on input, defined in "link"
	}

	var reset = function(){
		$scope.userTyping("");
		$scope.data.journalEntry = "";
		$scope.updateFormWithJournalFields();
		$scope.data.useSecondaryJournalField = false;
		$scope.data.journalEntryField = "";
	}

	$scope.keyPress = function(event) {
		if ($scope.data.isPosting) {
			if (event.keyCode === 13 && !event.shiftKey)
				event.preventDefault();
			return;
		}
		
		if ($scope.data.enterKeyAddsNewLine)
			return; // must click Send button to submit
		
		if (event.keyCode === 13 && !event.shiftKey) {
			event.preventDefault();
			$timeout(function() {
				if ($scope.data.journalEntry)
					$scope.postEntry($scope.data.journalEntry);
			}, 250);
		}
	}

	$scope.userTyping = function(input) {
		var status = "viewing";
		if (input.length)
			status = "typing";

		var field = $scope.data.useSecondaryJournalField ? $scope.data.secondaryJournalField.name : $scope.data.primaryJournalField.name;
		$scope.$emit("record.typing", {status: status, value: input, table: $scope.data.table, sys_id: $scope.data.sys_id, field_type: field});
		$scope.updateFormWithJournalFields();
	}
	$scope.updateFormWithJournalFields = function () {
		var fieldName, fieldToClear = "";
		if ($scope.data.useSecondaryJournalField) {
			fieldName = $scope.data.secondaryJournalField.name;
			fieldToClear = $scope.data.primaryJournalField.name;
		} else {
			fieldName = $scope.data.primaryJournalField.name;
			fieldToClear = "";
		}
		$scope.$emit("activity_stream_is_changed", {"fieldName": fieldName, "fieldToClear": fieldToClear, "input": $scope.data.journalEntry});
	}

	$scope.toggleTranslation = function(e) {
	    e.showDetails = !e.showDetails;
		var translationObject = c.data.translation;
	    e.toggleMsg = e.showDetails ? translationObject.hideMsg : translationObject.showMsg;
	};

	$scope.getTranslatedText = function(translations) {
	    if (!(Array.isArray(translations)))
	        return;
	    var translatedText;
	    var translationsLength = translations.length;
	    for (var index = 0; index < translationsLength; index++) {
	        if (translations[index].targetLanguage === g_lang) {
	            translatedText = translations[index].translatedText;
	            break;
	        }
	    }
	    return translatedText;
	};

	$scope.getAdditionalParameters = function(e, isRetry) {
	    return {
	        'event': {
	            'eventName': 'Activity Stream - Portal',
	            'fieldType': e.element,
	            'retry': isRetry
	        },
	        'additionalParameters': [{
	            'parameterName': 'textType',
	            'parameterValue': 'html'
	        }, {
	            'parameterName': 'escapeHtml',
	            'parameterValue': e.contains_code
	        }]
	    };
	}

	$scope.showTranslationInProgress = function(e) {
	    e.showTranslation = true;
	    e.isTranslationInProgress = true;
	    e.isTranslationSuccess = false;
	    e.isTranslationError = false;
	}

	$scope.showTranslationSuccess = function(e, translatedText, credits) {
	    e.translatedText = translatedText;
	    e.credits = credits;
	    e.toggleMsg = c.data.translation.hideMsg;
	    e.isTranslationInProgress = false;
	    e.isTranslationSuccess = true;
	    e.isTranslationError = false;
	    e.showDetails = true;
	}

	$scope.showTranslationError = function(e, errorMessage, tryAgain) {
	    e.isTranslationInProgress = false;
	    e.isTranslationSuccess = false;
	    e.isTranslationError = true;
	    e.translatedText = errorMessage;
	    e.tryAgain = tryAgain;
	}

	$scope.translateText = function(e, isRetry) {
	    $scope.showTranslationInProgress(e);
	    var translationObject = c.data.translation;
	    dynamicTranslation.getTranslation(e.value, $scope.getAdditionalParameters(e, isRetry)).then(
	        function(successResponse) {
	            if (successResponse.detectedLanguage.code === g_lang) {
	                $scope.showTranslationError(e, translationObject.sameLanguageErrorMsg, false);
	                return;
	            }
	            var translatedText = $scope.getTranslatedText(successResponse.translations);
	            if (translatedText) {
	                var credits = i18n.format(translationObject.creditsMsg, successResponse.translator);
	                $scope.showTranslationSuccess(e, translatedText, credits);
	            } else {
	                translatedText = translationObject.genericErrorMsg;
	                $scope.showTranslationError(e, translatedText, true);
	            }
	        },
	        function(errorResponse) {
	            var errorCode = errorResponse.code;
	            var errorMessage;
	            var showRetry = false;
	            switch (errorCode) {
	                case '40052':
	                    errorMessage = translationObject.maxLengthErrorMsg;
	                    break;
	                case '40055':
	                    errorMessage = translationObject.credentialsErrorMsg;
	                    break;
	                case '40053':
	                case '40054':
	                case '40056':
	                    errorMessage = translationObject.langNotSupportedErrorMsg;
	                    break;
	                default:
	                    errorMessage = translationObject.genericErrorMsg;
	                    showRetry = true;
	            }
	            $scope.showTranslationError(e, errorMessage, showRetry);
	        }
	    );
	}
	
		var q = "sys_id="+$scope.data.sys_id;
	console.log('record watch filter = '+q);
	spUtil.recordWatch($rootScope, $scope.data.table, q, function(name){
	console.log('record watched!!! '+name.data);
	console.dir(name.data); //Returns the data inserted or updated on the table

   if (name.data.changes.includes("comments")) { // only update if state was updated.
      spUtil.update($scope);
   }
		// listen for changes to incident table records where the record is active i

		console.dir(name); //Returns information about the event that has occurred
		console.dir(name.data); //Returns the data inserted or updated on the table

	});

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-title {
  display: inline;
}

.panel-title-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.panel-title-icons {

  ul {
    display: flex;
    align-items: center;
    padding: 0;
    margin: 0;
  }
  li {
    padding: 0;
    margin: 0;

    .panel-button {
      display: flex;
      align-items: center;
      margin: 0 0 0 15px;
      line-height: initial;

      &amp;:hover, &amp;:focus {
        text-decoration: none;
      }
    }
  }
}


.timeline-heading test {
  float:right;
}

.timeline-body &gt; p {
  white-space: pre-wrap;
  overflow-x: hidden;
}

.timeline-body ul &gt; li {
  float: none;
}

.no-resize {
  resize: none;
}

.journal-field-indicator {
  width: 5px;
  position: absolute;
  left: 5px;
  top: 5px;
  bottom: 5px;
  z-index: 3;
}

.panel-heading {
  word-wrap: break-word;
}

.avatar-container {
  cursor: default;
}

ul {
  list-style: none;
}

.overflow-hidden {
  overflow: hidden;
}


.timeline-badge-wrap {
  margin: auto;
  max-width: 115px;
}

.timeline-badge.success {
  background-color: $success;
}

.timeline-badge {
  position: relative;
  left:25%;
  width:50%;
  padding-bottom:50%;
  border-radius:50%;
}

.timeline-badge span{
  position:absolute;
  top:50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size:13px;
  color: #fff;
}

.timeline::before {
  content: none;
}

.timeline-before {
    content: '';
    position: absolute;
    top: 0;
    bottom: 20px;
    left: 0;
    right: 50%;
    border-right: 2px #dee5e7 solid;  
}

.journal-type {
 	display: inline-flex;
  display: -ms-inline-flexbox;
  flex-wrap: wrap;
  -webkit-justify-content: flex-end;
}

.fa-circle {
  font-size: 4px;
  padding: 7px;
}

@media (max-width: 768px) {
  .timeline-badge-wrap {
    margin: 0;
  }
  .timeline-badge {
    left: 10%;
  }
}

.translation-font {
  font-size: 12px;
}

.translate-link {
  cursor: pointer;
  @extend .translation-font;
}

.translation-credits {
  font-style: italic;
}

.translation-message {
  padding-top: 10px;
  font-size: 14px;
  white-space: pre-wrap;
}

.toggle-link-show {
  display: none;
}

.translation-credits {
  font-style: italic;
}

.translation-icon {
  width: 12px;
  height: 12px;
  padding-right: 4px;
  @extend .translation-font;
}

.translation-container {
  border: 1px solid $well-border;
  border-radius: 3px;
  background-color: $well-bg;
  padding: 10px;
  color: $text-color;
  margin-top: 10px;
  @extend .translation-font;
}

.translation-delimiter {
  padding: 7px;
  @extend .translation-font;
}

.translate-wrap {
  white-space: nowrap;
}
		</css>
        <data_table>sp_instance</data_table>
        <demo_data>{"options": {
	"sys_id": -1,
		"table": "incident"
	}
}</demo_data>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>pa_widget_ticket_conversation</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, elm) {
	// Set the focus back on the input for IE11
	scope.setFocus = function() {
		var input = $(elm[0]).find('textarea#post-input');
		if (input[0])
			input[0].focus();
	}
}]]></link>
        <name>PA Ticket Conversations</name>
        <option_schema>[{"hint":"Placeholder text shows selected journal field","name":"use_dynamic_placeholder","section":"Behavior","label":"Use dynamic placeholder","type":"boolean"},{"hint":"Message to show when record has no readable journal field","name":"no_readable_journal_field_message","default_value":"","section":"Presentation","label":"No readable journal field message","type":"string"},{"hint":"Enter key behavior is specified by system property (glide.service_portal.comment.enter_adds_newline) unless overridden here","name":"enter_key_behavior","section":"Behavior","default_value":"System property","label":"Enter key behavior","type":"choice","choices":[{"label":"System property","value":"System property"},{"label":"Submit","value":"Submit"},{"label":"New line","value":"New line"}]},{"hint":"Alternate data table","name":"table","section":"other","label":"Data Table","type":"string"},{"name":"alt_sys_id_query","section":"other","label":"Alternate Sys_id Query","type":"string"}]</option_schema>
        <public>false</public>
        <roles>snc_external,snc_internal</roles>
        <script><![CDATA[(function() {
	data.currentUserID = gs.getUserID();
	
  var grUser = new GlideRecord('sys_user');
	if (grUser.get(data.currentUserID))
	    data.usersBranch = grUser.getValue('location')+'';
	if (input && input.usersBranch) {
	    data.usersBranch = input.usersBranch;
	}
		
	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	data.uploadingAttachmentMsg = gs.getMessage("Uploading attachment...");
	data.sharingLocMsg = gs.getMessage("Sharing location...");
	data.scanBarcodeMsg = gs.getMessage("Scan barcode");
	data.checkInLocMsg = gs.getMessage("Check in location");
	data.messagePostedMsg = gs.getMessage("Message has been sent");
	data.viewMsg = gs.getMessage("View");
	data.attachAddedMsg = gs.getMessage("Attachment added");
	data.attachFailMsg = gs.getMessage("Failed to add attachment");
	data.scanFailedMsg = gs.getMessage("File failed security scan");
	data.sys_id = options.sys_id || $sp.getParameter("sys_id");
	data.table = (input && input.table) || options.table || $sp.getParameter("table");
	if (input && input.sys_id && data.original_sys_id)
	    data.sys_id = data.original_sys_id;

	if (options.alt_sys_id_query && data.table && data.sys_id) {
		var grAlt = new GlideRecord(data.table);
	  grAlt.addQuery(options.alt_sys_id_query+'='+data.sys_id);
		// parent=8110acd8db8e6010f46dcd3f29961985^location=bfef98b8db862010f46dcd3f2996190b
		if (data.usersBranch) 
			grAlt.addQuery('location', data.usersBranch);
		
		grAlt.query();

		// get only first record
		if (grAlt.next()) {

			data.original_sys_id = data.sys_id;
			data.sys_id = grAlt.sys_id+'';
		}
	}
	
	// don't use options.title unless sys_id and table also come from options
	if (options && options.sys_id && options.table)
		data.ticketTitle = options.title;
	data.placeholder = options.placeholder || gs.getMessage("Type your message here...");
	data.placeholderNoEntries = options.placeholderNoEntries || gs.getMessage("Type your message here...");
	data.btnLabel = options.btnLabel || gs.getMessage("Send");
	data.includeExtended = options.includeExtended || false;
	data.use_dynamic_placeholder = options.use_dynamic_placeholder;
	data.hideAttachmentBtn = options.hideAttachmentBtn;
	data.viewAttachmentMsg = gs.getMessage("View attachment");
	data.downloadAttachmentMsg = gs.getMessage("Download attachment");

	var translationLuaParameters = {
		'event': {
			'eventName': 'Activity Stream - Portal'
			}
		};
	var isDynamicTranslationInstalled = GlidePluginManager.isActive("com.glide.dynamic_translation");
	if (isDynamicTranslationInstalled) {
		var isDynamicTranslationEnabled	= sn_dt_api.DynamicTranslation.isEnabled(translationLuaParameters);
		data.isTranslationEnabled = isDynamicTranslationEnabled && isDynamicTranslationEnabled.translation;
		if(data.isTranslationEnabled)
			initDynamicTranslation();
	}

	function initDynamicTranslation() {
	    var translation = {};
	    translation.translateLinkMsg = gs.getMessage("Translate");
	    translation.sameLanguageErrorMsg = gs.getMessage("This content is written in your preferred language. No need to translate.");
	    translation.genericErrorMsg = gs.getMessage("Unable to translate.");
	    translation.credentialsErrorMsg = gs.getMessage("Credentials are missing or invalid. Contact your administrator.");
	    translation.maxLengthErrorMsg = gs.getMessage("Text has exceeded the maximum length.");
	    translation.langNotSupportedErrorMsg = gs.getMessage("Text cannot be translated to your preferred language.");
	    translation.creditsMsg = gs.getMessage("Translated by {0}");
	    translation.translationProgressMsg = gs.getMessage("Translating...");
	    translation.hideMsg = gs.getMessage("Hide");
	    translation.showMsg = gs.getMessage("Show");
	    translation.tryAgainMsg = gs.getMessage("Try Again");
	    data.translation = translation;
	}

	data.enterKeyAddsNewLine = false;
	if (options.enter_key_behavior == "System property")
		data.enterKeyAddsNewLine = gs.getProperty("glide.service_portal.comment.enter_adds_newline") == "true";
	else if (options.enter_key_behavior == "New line")
		data.enterKeyAddsNewLine = true;

	var gr = new GlideRecord(data.table);
	if (!gr.isValid())
		return;

	gr.get(data.sys_id);
	data.isNewRecord = data.sys_id == -1 || gr.isNewRecord();
	if ((!gr.isValidRecord() && data.sys_id != -1) || !gr.canRead())
		return;

	data.table = gr.getRecordClassName(); // use actual table for the record
	options.no_readable_journal_field_message = options.no_readable_journal_field_message || gs.getMessage("No readable comment field");
	data.number = gr.getDisplayValue('number');
	data.created_on = gr.getValue('sys_created_on');

	if (input) { // if we have input then we're saving
		if (input.journalEntry && input.journalEntryField){
			if (gr.canWrite(input.journalEntryField)){
				gr[input.journalEntryField].setDisplayValue(input.journalEntry);
				gr.update();
				$sp.logStat('Comments', data.table, data.sys_id, input.journalEntry);
			}
		}
		data.ticketTitle = input.ticketTitle;
		data.placeholder = input.placeholder;
		data.btnLabel = input.btnLabel;
		data.includeExtended = input.includeExtended;
	} else {
		if (!data.ticketTitle) {
			if (gr.short_description.canRead())
				data.ticketTitle = gr.getDisplayValue("short_description");
			if (!data.ticketTitle)
				data.ticketTitle = data.number;
		}

		$sp.logStat('Task View', data.table, data.sys_id);
	}
	// override
			if (gr.short_description.canRead())
				data.ticketTitle = gr.getDisplayValue("short_description");
			if (!data.ticketTitle)
				data.ticketTitle = data.number;
	
	data.canWrite = gr.canWrite();
	data.canAttach = userCanAttach(gr);
	data.canRead = gr.canRead();
	data.hasWritableJournalField = false;
	data.hasReadableJournalField = false;
	if (data.canRead && !data.isNewRecord) {
		data.stream = $sp.getStream(data.table, data.sys_id);
		// Journal fields come in correct order already
		// so grab the first 2 writeable fields
		if ('journal_fields' in data.stream) {
			var jf = data.stream.journal_fields;
			for(var i=0; i < jf.length; i++){
				if (jf[i].can_read === true)
					data.hasReadableJournalField = true;
				if (jf[i].can_write === true){
					data.hasWritableJournalField = true;
					if (!data.primaryJournalField)
						data.primaryJournalField = jf[i];
					else if (data.includeExtended && !data.secondaryJournalField)
						data.secondaryJournalField = jf[i];
					else
						break;
				}
			}
		}

	}

	data.tableLabel = gr.getLabel();

	function userCanAttach(originalRecord) {
		if (!gs.hasRole(gs.getProperty("glide.attachment.role")))
			return false;
		
		// To check whether user can upload attachments, need to check "no_attachment" table
		// attribute of the target record (e.g., incident vs. task), so fetch it if we need to.
		// GlideRecordScriptUtil.getRealRecord is not available to scoped apps, so can't use it.
		var targetRecordForAttributes = originalRecord;
		if (originalRecord.getRecordClassName() != originalRecord.getTableName()) {
			targetRecordForAttributes = new GlideRecord(originalRecord.getRecordClassName());
			targetRecordForAttributes.get(originalRecord.getUniqueValue());
		}
		return targetRecordForAttributes.getAttribute("no_attachment") != "true";
	}

})()]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-01-28 20:55:40</sys_created_on>
        <sys_id>250a7fe8db062010f46dcd3f299619a2</sys_id>
        <sys_mod_count>86</sys_mod_count>
        <sys_name>PA Ticket Conversations</sys_name>
        <sys_package display_value="Product Assurance" source="x_106059_product_a">91e55c50db4e6010f46dcd3f29961970</sys_package>
        <sys_policy/>
        <sys_scope display_value="Product Assurance">91e55c50db4e6010f46dcd3f29961970</sys_scope>
        <sys_update_name>sp_widget_250a7fe8db062010f46dcd3f299619a2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-01-29 17:46:21</sys_updated_on>
        <template><![CDATA[<div>
<div ng-if="!data.canRead && !data.isNewRecord">
   ${Requested record not found}
</div>
<div ng-if="data.canRead && !data.isNewRecord" class="panel panel-{{options.color}} b ticket_conversation">
   <div class="panel-heading">
      <div class="h2 panel-title panel-title-container">
         <h2 class="h4 panel-title" aria-label="{{::data.ticketTitle}} ${Ticket history}">{{data.ticketTitle}}</h2>
         <div class="pull-right panel-title-icons">
            <ul>
               <li>
                  <button href ng-show="data.showLocationIcon && data.canWrite" class="panel-button btn btn-link" ng-click="checkInLocation()" title="{{data.checkInLocMsg}}">
                  <span class="glyphicon glyphicon-globe"></span>
                  </button>
               </li>
               <li>
                  <button href class="panel-button btn btn-link" ng-show="isNative" ng-click="scanBarcode()" title="{{data.scanBarcodeMsg}}">
                  <span class="glyphicon glyphicon-barcode"></span>
                  </button>
               </li>
               <li ng-if="::(!data.hideAttachmentBtn)">
                  <sp-attachment-button ng-if="::data.canWrite && data.canAttach"></sp-attachment-button>
               </li>
            </ul>
         </div>
      </div>
   </div>
   <div class="panel-body">
      <div ng-if="data.hasReadableJournalField">
         <form ng-submit="postEntry(data.journalEntry)" id="sand">
            <div ng-show="data.hasWritableJournalField" class="input-group">
               <textarea ng-keypress="keyPress($event)" sn-resize-height="trim" rows="1" id="post-input" class="form-control no-resize overflow-hidden" ng-model='data.journalEntry' ng-model-options='{debounce: 250}' ng-attr-placeholder="{{getPlaceholder()}}" aria-label="{{getPlaceholder()}}" autocomplete="off" ng-change="userTyping(data.journalEntry)"/>
               <span class="journal-field-indicator" ng-style="({'background-color': data.useSecondaryJournalField ? data.secondaryJournalField.color : data.primaryJournalField.color})"></span>
               <span class="input-group-btn" style="vertical-align: top">
               <input type="submit" class="btn btn-primary" value="{{data.btnLabel}}" ng-disabled="data.isPosting"/>
               </span>
            </div>
            <div ng-if="::(data.secondaryJournalField && data.secondaryJournalField.can_write)">
               <label class="pull-right">
               <input type="checkbox" ng-model="::data.useSecondaryJournalField" ng-change="updateFormWithJournalFields()"/>
               <span> {{::data.secondaryJournalField.label}}</span>
               </label>
            </div>
         </form>
         <ul class="list-group m-b-none" ng-if="typing.length > 0">
            <li class="list-group-item user-typing m-t" ng-repeat="u in typing">${{{::u.user_display_name}} is typing}</li>
         </ul>
         <ul class="list-group m-b-none m-t" ng-if="msg">
            <li class="list-group-item user-typing">{{msg}}</li>
         </ul>
         <div class="timeline-container">
            <ul role="list" class="timeline" aria-label="${Ticket history}">
               <div class="timeline-before" role="presentation" aria-hidden="true" />
                  <li class="timeline-item" ng-class="::{'timeline-inverted': e.user_sys_id == data.currentUserID}" ng-repeat="e in data.mergedEntries">
                     <div class="timeline-badge">
                        <sn-avatar-once ng-if="hasLiveProfile(e.user_sys_id)" primary="getLiveProfileByUserId(e.user_sys_id)" class="avatar-large" show-presence="false" enable-context-menu="false"></sn-avatar-once>
                     </div>
                     <div class="timeline-panel">
                        <div class="timeline-panel-inner" ng-style="::{'border-color': getFieldColor(e.element)}">
                           <div class="timeline-heading">
                              <div class="timeline-title h4">{{::e.name}}</div>
                              <p class = "time-text">
                                 <small class="text-muted">
                                    <span class="glyphicon glyphicon-time" aria-hidden="true" tabindex="-1" />
                                    <sn-time-ago timestamp="::e.sys_created_on" />
                                 </small>
                                 <i ng-if="::e.field_label" class="fa fa-circle text-muted" aria-hidden="true"></i>
                                 <small class = "text-muted journal-type">{{::e.field_label}}</small>
                                 <span ng-if= "::((e.element == 'comments' || e.element == 'work_notes') && data.isTranslationEnabled)">
                                 <small class="text-muted translation-delimiter">•</small>
                                 <span class="translate-wrap">
                                 <i class="text-muted translation-icon icon-translation"></i>
                                 <a class="translate-link" role="button" href="javascript:void(0)" ng-click="translateText(e, false)">{{::data.translation.translateLinkMsg}}</a>
                                 </span>
                                 </span>
                              </p>
                           </div>
                           <div class="timeline-body">
                              <p ng-if="::(e.element != 'attachment')" ng-bind-html="::trustAsHtml(e.value)"></p>
                              <div ng-if="::(e.element == 'attachment')">
                                 <a ng-if="(e.attachment.state == 'available' && e.attachment.thumbnail_path)" target="_blank" href="/sys_attachment.do?view=true&sys_id={{::e.attachment.sys_id}}" aria-label="{{e.attachment.viewImage ? data.viewAttachmentMsg : data.downloadAttachmentMsg}} {{::e.attachment.file_name}}">
                                 <img alt="" ng-src="/{{::e.attachment.path}}?t=medium" class="img-responsive"/>
                                 </a>
                                 <a ng-if="((e.attachment.state == '' || e.attachment.state == 'pending' || e.attachment.state == 'available_conditionally') && e.attachment.thumbnail_path)" ng-click="scanAttachment(e.attachment)" href="javascript:void(0)" aria-label="{{e.attachment.viewImage ? data.viewAttachmentMsg : data.downloadAttachmentMsg}} {{::e.attachment.file_name}}">
                                 <img alt="" ng-src="/{{::e.attachment.path}}?t=medium" class="img-responsive"/>
                                 </a>
                                 <div>
                                    <div ng-if="(e.attachment.state == 'available')">
                                       <a href="/sys_attachment.do?sys_id={{::e.attachment.sys_id}}" target="_blank" title="{{dataViewMsg}}"><strong>{{e.attachment.file_name}}</strong></a><br/>
                                       {{::e.attachment.size}}
                                    </div>
                                    <div ng-if="(e.attachment.state == 'not_available')">
                                       <span title="{{dataViewMsg}}" class="not_available">{{e.attachment.file_name}}</span><br/>
                                       <span class="error">{{::data.scanFailedMsg}}</span>
                                    </div>
                                    <div ng-if="(e.attachment.state == '' || e.attachment.state == 'pending' || e.attachment.state == 'available_conditionally')">
                                       <a href="javascript:void(0)" ng-click="scanAttachment(e.attachment)" title="{{dataViewMsg}}"><strong>{{e.attachment.file_name}}</strong></a><br/>
                                       {{::e.attachment.size}}
                                    </div>
                                 </div>
                              </div>
                           </div>
                           <div ng-if="e.showTranslation" class="translation-container">
                              <div ng-if="e.isTranslationInProgress">
                                 <i class="translation-icon icon-translation"></i>
                                 <span aria-live="polite">{{::data.translation.translationProgressMsg}}</span>
                              </div>
                              <div ng-if="e.isTranslationSuccess">
                                 <i class="translation-icon icon-translation"></i>
                                 <a class="translate-link" role="button" href="javascript:void(0)" ng-click="toggleTranslation(e)">{{e.toggleMsg}}</a>
                                 <span class="translation-delimiter">•</span>
                                 <span class="translation-credits">{{e.credits}}</span>
                                 <div ng-if="e.showDetails" class="translation-message" ng-bind-html="::e.translatedText"></div>
                              </div>
                              <div ng-if="e.isTranslationError">
                                 <i class="translation-icon icon-translation"></i>
                                 {{e.translatedText}}
                                 <a ng-if="e.tryAgain" role="button" href="javascript:void(0)" class="translate-link" ng-click="translateText(e, true)">{{::data.translation.tryAgainMsg}}</a>
                              </div>
                           </div>
                        </div>
                     </div>
                  </li>
                  <li role="listitem" class="timeline-item" ng-class="::{'timeline-inverted': data.stream.user_sys_id == data.currentUserID}" aria-label="{{data.stream.user_full_name}}">
                     <div class="timeline-badge">
                        <sn-avatar-once ng-if="hasLiveProfile(data.stream.user_sys_id)" primary="getLiveProfileByUserId(data.stream.user_sys_id)" class="avatar-large" show-presence="false" enable-context-menu="false"></sn-avatar-once>
                     </div>
                     <div class="timeline-panel timeline-panel-first-item">
                        <div class="timeline-heading">
                           <div class="timeline-title h4">{{data.stream.user_full_name}}</div>
                           <p>
                              <small class="text-muted">
                                 <span class="glyphicon glyphicon-time" aria-hidden="true" tabindex="-1" />
                                 <sn-time-ago timestamp="data.created_on" />
                              </small>
                           </p>
                        </div>
                        <div class="timeline-body">
                           <p>{{data.number}} ${Created}</p>
                        </div>
                     </div>
                  </li>
                  <li>
                     <div class="timeline-badge-wrap">
                        <div class="timeline-badge success">
                           <span>${Start}</span>
                        </div>
                     </div>
                  </li>
            </ul>
            </div>
         </div>
         <div ng-if="!data.hasReadableJournalField">
            {{options.no_readable_journal_field_message}}
         </div>
      </div>
   </div>
</div>]]></template>
    </sp_widget>
</record_update>
